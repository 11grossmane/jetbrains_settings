<templateSet group="Go">
  <template name="error-parser" value="// parseResponse ensures the response status codes, and ability to decode response body&#10;func (i *PaymentsClientImpl) parseResponse(res *http.Response, respStruct interface{}, startTime time.Time,&#10;&#9;metricName string) error {&#10;&#9;i.metrics.Timer(metricName, time.Since(startTime))&#10;&#9;i.metrics.Increment(fmt.Sprintf(metricName+&quot;.%s&quot;, strconv.Itoa(res.StatusCode)))&#10;&#10;&#9;js, err := ioutil.ReadAll(res.Body)&#10;&#9;if err != nil {&#10;&#9;&#9;return &amp;ihttp.Error{&#10;&#9;&#9;&#9;Message:    err.Error(),&#10;&#9;&#9;&#9;StatusCode: http.StatusInternalServerError,&#10;&#9;&#9;}&#10;&#9;}&#10;&#10;&#9;switch res.StatusCode {&#10;&#9;case http.StatusOK, http.StatusCreated:&#10;&#9;&#9;if err := json.Unmarshal(js, respStruct); err != nil {&#10;&#9;&#9;&#9;return &amp;ihttp.Error{&#10;&#9;&#9;&#9;&#9;Message:    string(js),&#10;&#9;&#9;&#9;&#9;StatusCode: http.StatusInternalServerError,&#10;&#9;&#9;&#9;}&#10;&#9;&#9;}&#10;&#9;&#9;return nil&#10;&#9;case http.StatusNoContent:&#10;&#9;&#9;return nil&#10;&#9;case http.StatusNotFound, http.StatusBadRequest, http.StatusConflict:&#10;&#9;&#9;return &amp;ihttp.Error{&#10;&#9;&#9;&#9;Message:    string(js),&#10;&#9;&#9;&#9;StatusCode: res.StatusCode,&#10;&#9;&#9;}&#10;&#9;default:&#10;&#9;&#9;return &amp;ihttp.Error{&#10;&#9;&#9;&#9;StatusCode: res.StatusCode,&#10;&#9;&#9;&#9;Message:    fmt.Sprintf(&quot;unexpected response code: %v, message: %v&quot;, res.StatusCode, string(js)),&#10;&#9;&#9;}&#10;&#9;}&#10;}" description="http error parsing" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="error-ihttp-handler" value="if err != nil {&#10;&#9;&#9;logger.Errorw(metricName, &quot;userID&quot;, userID, &quot;err&quot;, err)&#10;&#9;&#9;if paymentsError, ok := err.(*ihttp.Error); ok {&#10;&#9;&#9;&#9;ihttp.RespondWithError(rw, paymentsError.StatusCode, &#10;&#9;&#9;&#9;paymentsError.Message)&#10;&#9;&#9;&#9;return&#10;&#9;&#9;}&#10;&#9;&#9;ihttp.RespondWithError(rw, http.StatusInternalServerError, err.Error())&#10;&#9;&#9;return&#10;&#9;}" description="handles errors coming from iDrive clients" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="error-not-found" value="&#9;if err!=nil{&#10;&#9;&#9;ctxLog.Errorw(metricName+&quot;.IOUtil.ReadAll&quot;, &quot;err&quot;,err)&#10;&#9;&#9;ihttp.RespondWithError(rw,http.StatusInternalServerError,err.Error())&#10;&#9;&#9;return&#10;&#9;}" description="handles status not found http response" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
</templateSet>